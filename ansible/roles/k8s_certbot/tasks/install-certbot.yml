---
    # file: roles/k8s_certbot/tasks/install-certbot.yml
    
    - name: install the package "certbot, nginx"
      apt:
        pkg: 
        - certbot
        - nginx
      tags: install, certbot
    
    - name: rm file /etc/nginx/sites-enabled/certbot_{{ certificates.certbot.k8s.domain }}
      file:
        path: /etc/nginx/sites-enabled/certbot_{{ certificates.certbot.k8s.domain }}
        state: absent
      tags: install, configure, certbot

    - name: create directory /var/www/html/certbot_{{ certificates.certbot.k8s.domain }}
      file:
        path: /var/www/html/certbot_{{ certificates.certbot.k8s.domain }}
        state: directory
      tags: install, configure, certbot

    - name: create file /etc/nginx/sites-enabled/certbot_{{ certificates.certbot.k8s.domain }}
      blockinfile:
        path: /etc/nginx/sites-enabled/certbot_{{ certificates.certbot.k8s.domain }}
        marker: ""
        block: |
          server {
              listen      80;
              listen      [::]:80;

              server_name {{ certificates.certbot.k8s.domain }};

              location / {
                  root    /var/www/html/certbot_{{ certificates.certbot.k8s.domain }};
                  index   index.html index.htm;
              }
          }
        create: true
        backup: true
      tags: install, configure, certbot

    - name: create /var/www/html/certbot_{{ certificates.certbot.k8s.domain }}/index.html
      blockinfile:
        path: /var/www/html/certbot_{{ certificates.certbot.k8s.domain }}/index.html
        marker: ""
        block: |

          <!DOCTYPE html>
          <html>
          <head>
          <title>Welcome to nginx!</title>
          <style>
              body {
                  width: 35em;
                  margin: 0 auto;
                  font-family: Tahoma, Verdana, Arial, sans-serif;
              }
          </style>
          </head>
          <body>
          <h1>Welcome to nginx!</h1>
          <p>If you see this page, the nginx web server is successfully installed and
          working. Further configuration is required.</p>

          <p>For online documentation and support please refer to
          <a href="http://nginx.org/">nginx.org</a>.<br/>
          Commercial support is available at
          <a href="http://nginx.com/">nginx.com</a>.</p>

          <p><em>Thank you for using nginx.</em></p>
          </body>
          </html>

        create: true
        backup: true
      tags: install, configure, certbot

    - name: restart service nginx
      service:
        name: nginx
        state: restarted
      tags: install, configure, certbot

    - name: certbot certonly --webroot -w /var/www/html/certbot_{{ certificates.certbot.k8s.domain }} --agree-tos -m {{ certificates.certbot.email }} -d {{ certificates.certbot.k8s.domain }} --rsa-key-size 4096 -n
      shell: certbot certonly --webroot -w /var/www/html/certbot_{{ certificates.certbot.k8s.domain }} --agree-tos -m {{ certificates.certbot.email }} -d {{ certificates.certbot.k8s.domain }} --rsa-key-size 4096 -n
      become: true
      register: certbot_result

    - name: store certbot result
      copy:
        content: "{{ certbot_result.stdout }}"
        dest: "/var/log/certbot_{{ certificates.certbot.k8s.domain }}"


    - name: create file /etc/nginx/sites-enabled/certbot_{{ certificates.certbot.k8s.domain }}_ssl
      blockinfile:
        path: /etc/nginx/sites-enabled/certbot_{{ certificates.certbot.k8s.domain }}_ssl
        marker: ""
        block: |
          server {
              listen      443;
              listen      [::]:443;

              server_name {{ certificates.certbot.k8s.domain }};

              location / {
                  root    /var/www/html/certbot_{{ certificates.certbot.k8s.domain }};
                  index   index.html index.htm;
              }

              ssl_certificate           /etc/letsencrypt/live/{{ certificates.certbot.k8s.domain }}/fullchain.pem;
              ssl_certificate_key       /etc/letsencrypt/live/{{ certificates.certbot.k8s.domain }}/privkey.pem;
              ssl_trusted_certificate   /etc/letsencrypt/live/{{ certificates.certbot.k8s.domain }}/chain.pem;

              ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
              ssl_prefer_server_ciphers on;
              ssl_ciphers               ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-
          RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS;
              ssl_ecdh_curve            secp384r1;
            
              ssl_session_cache         shared:SSL:4m;
              ssl_session_timeout       1440m;
              ssl_stapling              on;
              ssl_stapling_verify       on;
              resolver                  8.8.8.8 8.8.4.4;

              add_header                Strict-Transport-Security max-age=31536000;

          }
        create: true
        backup: true
      tags: install, configure, certbot

    - name: restart service nginx
      service:
        name: nginx
        state: restarted
      tags: install, configure, certbot

